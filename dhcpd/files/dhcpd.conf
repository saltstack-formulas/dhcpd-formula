# dhcpd.conf
#
# SaltStack-generated configuration file for ISC dhcpd
#

{%- set types_to_quote = ['string', 'text'] %}
{%- set quote = '' %}
{%- set dquote = '"' %}

# Customized dhcp options
{%- for name, data in dhcpd.customized_options.items() %}
option {{ name|replace('_', '-') }} code {{ data.code }} = {{ data.type }};
{%- endfor %}

# option definitions common to all supported networks...
{% if dhcpd.domain_name -%}
option domain-name "{{ dhcpd.domain_name }}";
{% endif -%}
{% if dhcpd.domain_name_servers -%}
option domain-name-servers
  {%- for dns_server in dhcpd.domain_name_servers %} {{ dns_server }}
    {%- if not loop.last %},{% else %};{% endif %}
  {%- endfor %}
{% endif -%}
{% if dhcpd.subnet_mask -%}
option subnet-mask {{ dhcpd.subnet_mask }};
{% endif -%}
{% if dhcpd.routers -%}
option routers
  {%- for router in dhcpd.routers %} {{ router }}
    {%- if not loop.last %},{% else %};{% endif %}
  {%- endfor %}
{% endif -%}
{% if dhcpd.domain_search -%}
option domain-search {{ dquote }}{{ dhcpd.domain_search | join( '" , "' ) }}{{ dquote }};
{% endif -%}

{% if dhcpd.default_lease_time -%}
default-lease-time {{ dhcpd.default_lease_time }};
{% endif -%}
{% if dhcpd.max_lease_time -%}
max-lease-time {{ dhcpd.max_lease_time }};
{% endif -%}
{% if dhcpd.one_lease_per_client -%}
one-lease-per-client {{ dhcpd.one_lease_per_client }};
{% endif -%}
{% if dhcpd.get_lease_hostnames -%}
get-lease-hostnames {{ dhcpd.get_lease_hostnames }};
{% endif -%}
{% if dhcpd.server_identifier -%}
server-identifier {{ dhcpd.server_identifier }};
{% endif -%}
{% if dhcpd.server_name -%}
server-name {{ dquote }}{{ dhcpd.server_name }}{{ dquote }};
{% endif -%}
{%- if dhcpd.use_host_decl_names %}
use-host-decl-names on;
{%- else %}
#use-host-decl-names off;
{%- endif %}

{%- if dhcpd.allow %}
{%-   if dhcpd.allow is iterable and dhcpd.allow is not string %}
{%-     for item in dhcpd.allow  %}
allow {{ item }};
{%-     endfor %}
{%-   else %}
allow {{ dhcpd.allow }};
{%-   endif %}
{%- endif %}

{%- if dhcpd.deny %}
{%-   if dhcpd.deny is iterable and dhcpd.deny is not string %}
{%-     for item in dhcpd.deny %}
deny {{ item }};
{%-     endfor %}
{%-   else %}
deny {{ dhcpd.deny }};
{%-   endif %}
{%- endif %}

# LDAP Backend Configuration
{%- if dhcpd.ldap_server %}
ldap-server "{{ dhcpd.ldap_server }}";
{%- endif %}
{%- if dhcpd.ldap_port %}
ldap-port {{ dhcpd.ldap_port }};
{%- endif %}
{%- if dhcpd.ldap_username %}
ldap-username "{{ dhcpd.ldap_username }}";
{%- endif %}
{%- if dhcpd.ldap_password %}
ldap-password "{{ dhcpd.ldap_password }}";
{%- endif %}
{%- if dhcpd.ldap_base_dn %}
ldap-base-dn "{{ dhcpd.ldap_base_dn }}";
{%- endif %}
{%- if dhcpd.ldap_method %}
ldap-method {{ dhcpd.ldap_method }};
{%- endif %}
{%- if dhcpd.ldap_debug_file %}
ldap-debug-file "{{ dhcpd.ldap_debug_file }}";
{%- endif %}
{%- if dhcpd.ldap_init_retry %}
ldap-init-retry {{ dhcpd.ldap_init_retry }};
{%- endif %}
{%- if dhcpd.ldap_ssl %}
ldap-ssl {{ dhcpd.ldap_ssl }};
{%- endif %}
{%- if dhcpd.ldap_tls_reqcert %}
ldap-tls-reqcert {{ dhcpd.ldap_tls_reqcert }};
{%- endif %}
{%- if dhcpd.ldap_tls_ca_file %}
ldap-tls-ca-file "{{ dhcpd.ldap_tls_ca_file }}";
{%- endif %}
{%- if dhcpd.ldap_tls_ca_dir %}
ldap-tls-ca-dir "{{ dhcpd.ldap_tls_ca_dir }}";
{%- endif %}
{%- if dhcpd.ldap_tls_cert %}
ldap-tls-cert "{{ dhcpd.ldap_tls_cert }}";
{%- endif %}
{%- if dhcpd.ldap_tls_key %}
ldap-tls-key "{{ dhcpd.ldap_tls_key }}";
{%- endif %}
{%- if dhcpd.ldap_tls_crlcheck %}
ldap-tls-crlcheck "{{ dhcpd.ldap_tls_crlcheck }}";
{%- endif %}
{%- if dhcpd.ldap_tls_ciphers %}
ldap-tls-ciphers "{{ dhcpd.ldap_tls_ciphers }}";
{%- endif %}
{%- if dhcpd.ldap_tls_randfile %}
ldap-tls-randfile "{{ dhcpd.ldap_tls_randfile }}";
{%- endif %}

# Use this to enable / disable dynamic dns updates globally.
{%- if dhcpd.ddns_update_style %}
ddns-update-style {{ dhcpd.ddns_update_style }};
{%- else %}
#ddns-update-style none;
{%- endif %}

{%- if dhcpd.ddns_rev_domainname %}
ddns-rev-domainname "{{ dhcpd.ddns_rev_domainname }}";
{%- endif %}

{%- if dhcpd.ddns_domainname %}
ddns-domainname "{{ dhcpd.ddns_domainname }}";
{%- endif %}

{%- if dhcpd.update_static_leases %}
update-static-leases on;
{%- else %}
#update-static-leases off;
{%- endif %}

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
{%- if dhcpd.authoritative %}
authoritative;
{%- else %}
#authoritative;
{%- endif %}

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
{%- if dhcpd.log_facility %}
log-facility {{ dhcpd.log_facility }};
{%- endif %}

{%- for option in dhcpd.customized_options.keys() %}
  {%- if option in dhcpd %}
    {%- if dhcpd.customized_options[option]['type'] in types_to_quote %} {% set quote = dquote %} {%- endif %}
option {{ option|replace('_', '-') }} {{ quote }}{{ dhcpd.get(option) }}{{ quote }};
  {%- endif %}
{%- endfor %}

{#- ### Option related macro ### #}
{%- macro print_option(option, value) %}
  {%- if option == 'next-server' %}
  next-server {{ value }};
  {%- endif %}
  {%- if option == 'filename' %}
  filename "{{ value }}";
  {%- endif %}
  {%- if option in dhcpd.customized_options.keys() %}
    {%- if dhcpd.customized_options[option]['type'] in types_to_quote %} {% set quote = dquote %} {%- endif %}
  option {{ option|replace('_', '-') }} {{ quote }}{{ value }}{{ quote }};
  {%- endif %}
{%- endmacro %}

{%- for class, config in dhcpd.classes.items() %}
  {%- if 'comment' in config %}
    {%- for line in config.comment.splitlines() %}
# {{ line }}
    {%- endfor %}
  {%- endif %}
class "{{ class }}" {
  {%- if 'match' in config %}
  match {{ config.match }};
  {%- endif %}
  {%- for option in config %}
    {{- print_option(option, config.get(option)) }}
  {%- endfor %}
}
{%- endfor %}

{%- for failover_peer, config in dhcpd.failover_peers.items() %}
  {%- if 'comment' in config %}
    {%- for line in config.comment.splitlines() %}
# {{ line }}
    {%- endfor %}
  {%- endif %}
failover peer "{{ failover_peer }}" {
  {%- if 'primary' in config %}
  primary;
  {%- elif 'secondary' in config %}
  secondary;
  {%- endif %}
  {%- if 'address' in config %}
  address {{ config.address }};
  {%- endif %}
  {%- if 'port' in config %}
  port {{ config.port }};
  {%- endif %}
  {%- if 'peer_address' in config %}
  peer address {{ config.peer_address }};
  {%- endif %}
  {%- if 'peer_port' in config %}
  peer port {{ config.peer_port }};
  {%- endif %}
  {%- if 'max_response_delay' in config %}
  max-response-delay {{ config.max_response_delay }};
  {%- endif %}
  {%- if 'max_unacked_updates' in config %}
  max-unacked-updates {{ config.max_unacked_updates }};
  {%- endif %}
  {%- if 'mclt' in config %}
  mclt {{ config.mclt }};
  {%- endif %}
  {%- if 'split' in config %}
  split {{ config.split }};
  {%- elif 'hba' in config %}
  hba {{ config.hba }};
  {%- endif %}
  {%- if 'load_balance_max_seconds' in config %}
  load balance max seconds {{ config.load_balance_max_seconds }};
  {%- endif %}
  {%- if 'max_lease_misbalance' in config %}
  max-lease-misbalance {{ config.max_lease_misbalance }};
  {%- endif %}
  {%- if 'max_lease_ownership' in config %}
  max-lease-ownership {{ config.max_lease_ownership }};
  {%- endif %}
  {%- if 'min_balance' in config %}
  min-balance {{ config.min_balance }};
  {%- endif %}
  {%- if 'max-balance' in config %}
  max-balance {{ config.max_balance }};
  {%- endif %}
}
{%- endfor %}

{%- for key, config in dhcpd.get('keys', {}).items() %}
key {{ key }} {
  {%- if 'algorithm' in config %}
  algorithm {{ config.algorithm }};
  {%- endif %}
  {%- if 'secret' in config %}
  secret {{ config.secret }};
  {%- endif %}
}
{%- endfor %}

{%- for zone, config in dhcpd.get('zones', {}).items() %}
zone {{ zone }} {
  {%- if 'primary' in config %}
  primary {{ config.primary }};
  {%- endif %}
  {%- if 'key' in config %}
  key {{ config.key }};
  {%- endif %}
}
{%- endfor %}

{%- for subnet, config in dhcpd.subnets.items() %}
{%- include 'dhcpd/files/subnet.jinja' with context %}
{%- endfor %}

{% for host, config in dhcpd.hosts.items() %}
{%- include 'dhcpd/files/host.jinja' with context %}
{% endfor %}
{%- for shared_network, sn_config in dhcpd.shared_networks.items() %}
  {%- if 'comment' in sn_config %}
    {%- for line in sn_config.comment.splitlines() %}
# {{ line }}
    {%- endfor %}
  {%- endif %}
shared-network {{ shared_network }} {
  {%- for subnet, config in sn_config.get('subnets', {}).items() %}
    {%- filter indent(width=2) %}
{% include 'dhcpd/files/subnet.jinja' with context %}
    {%- endfilter %}
  {%- endfor %}
  {%- for pool in sn_config.get( 'pools', [] ) %}
  pool {
    {%- if 'allow' in pool %}
    allow {{ pool.allow }};
    {%- elif 'deny' in pool %}
    deny {{ pool.deny }};
    {%- endif %}
    {%- if 'range' in pool %}
    range {{ pool.range[0] }} {{ pool.range[1] }};
    {%- endif %}
  }
  {%- endfor %}
  {%- for option in dhcpd.customized_options.keys() %}
    {%- if option in sn_config %}
     {%- if dhcpd.customized_options[option]['type'] in types_to_quote %} {% set quote = dquote %} {%- endif %}
  option {{ option|replace('_', '-') }} {{ quote }}{{ config.get(option) }}{{ quote }};
    {%- endif %}
  {%- endfor %}
}
{%- endfor %}
